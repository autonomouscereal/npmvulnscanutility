# Copy this file to `.env` and fill in the values

# -------------------------------------------------------------
# Checkmarx One (CxOne) auth and import settings
# -------------------------------------------------------------
# Base where the realm lives (NO tenant segment here)
# Example -> token URL built in code: ${CXONE_TOKEN_BASE_URL}/${CXONE_TENANT}/protocol/openid-connect/token
CXONE_TOKEN_BASE_URL=https://cxone-preprod/auth/realms
# Your tenant / realm name
CXONE_TENANT=cxone-preprod
# PAT/refresh token generated on the CxOne portal
CXONE_REFRESH_TOKEN=YOUR_REFRESH_TOKEN_HERE
# CxOne API base including /api/ suffix (required)
# Example: https://cxone-preprod/api/
CXONE_API_BASE_URL=https://cxone-preprod/api/
# OAuth client id (defaults to ast-app)
CXONE_CLIENT_ID=ast-app
# SSL verification: set to false for self-signed PoC
CXONE_VERIFY_SSL=true
# Git provider token used BY CxOne during repository import. If acceptable,
# you can reuse your scanner token via expansion: CXONE_SCM_GITHUB_TOKEN=${GITHUB_TOKEN}
# Example: ghp_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
CXONE_SCM_GITHUB_TOKEN=
# CxOne organization identity. Appears in payload as {"organization": {"orgIdentity": "YourOrg"}}
CXONE_ORG_IDENTITY=
# Import behavior and scanners
# When true, imported projects are scanned immediately
CXONE_SCAN_AFTER_IMPORT=true
# Batch size per import request (recommended <= 10). Example: 10
CXONE_IMPORT_BATCH_SIZE=10
# Enable optional scanners beyond SAST/SCA
CXONE_ENABLE_APISEC=true
CXONE_ENABLE_KICS=true


# -------------------------------------------------------------
# GitHub Enterprise (GHE) scanning & TLS
# -------------------------------------------------------------
# PAT used to enumerate repos and fetch file contents
# Example: ghp_YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY
GITHUB_TOKEN=
# API base for your enterprise host (note the /api/v3 suffix)
# Example: https://git.{org}.{govagency}.gov/api/v3
GITHUB_API_BASE=https://git.{org}.{govagency}.gov/api/v3
# Base URL used to construct repository links for CxOne import (NO trailing slash)
# Example concat in code: ${GITHUB_SCM_BASE_URL}/{owner}/{repo} -> https://git.org.gov/team/repo
GITHUB_SCM_BASE_URL=https://git.{org}.{govagency}.gov
# Organization short name to scan
GITHUB_ORG=govagencyname
# Optional single-repo test (format owner/repo). Leave blank to scan the whole org
# GITHUB_REPO=

# TLS handling for GHE API (used by the requests session)
# If your GHE uses a private CA chain, set bundle; otherwise leave blank
GITHUB_SSL_CA_BUNDLE=/etc/ssl/certs/govagency-root-ca.pem
# Set to 1 to disable SSL verification (insecure)
GITHUB_SSL_NO_VERIFY=0
# Auto-fetch server cert from the API base and trust it (writes PEM under OUTPUT_DIR)
AUTO_FETCH_SERVER_CERT=1
AUTO_TRUST_FETCHED_CERT=1


# -------------------------------------------------------------
# Scanner behavior and outputs
# -------------------------------------------------------------
# Primary JSON with malicious npm packages (schema: [{"name": str, "versions": [str]}])
# Example: ./bad_packages.json
BAD_PACKAGES_FILE=bad_packages.json
# Optional comma-separated feeds (URLs or file paths) to merge into the primary list
# Example: https://example.gov/feeds/npm-bad.json,./local-extra.json
BAD_FEED_URLS=
# Where outputs (CSV/JSON/Markdown) and logs will be written
# Example: ./scan_results
OUTPUT_DIR=./scan_results
# Optional: override log path; default is ${OUTPUT_DIR}/scan.log if left blank
LOG_FILE=./scan_results/scan.log
# Set to 1 to only log actions without writing files or POSTing to CxOne
DRY_RUN=1

# Parallelism and importer policy
# Max worker threads scanning repos (be mindful of API rate limits)
SCAN_MAX_WORKERS=8
# Severities that will be imported to CxOne (comma-separated). Example: P1,P2
IMPORT_SEVERITIES=P1,P2
# Maximum concurrent batches sent to CxOne (currently one importer thread; this gates future parallel importers)
IMPORT_MAX_PARALLEL=1

# Contacts: map GitHub logins to emails as <login>@domain (optional)
# Example: CONTACT_EMAIL_DOMAIN=example.gov => octocat@example.gov
CONTACT_EMAIL_DOMAIN=

# Detail toggles
# Include languages/topics/license/stars/forks/watchers in reports (1=on)
ENABLE_REPO_DETAILS=1
# Generate per-repo Markdown: ${OUTPUT_DIR}/repos/{owner}/{repo}.md (1=on)
ENABLE_PER_REPO_MD=1
# Max contributors listed per repo when deriving contacts
TOP_CONTRIBUTORS=5

# Optional: emit SARIF and HTML reports in OUTPUT_DIR
ENABLE_SARIF=1
ENABLE_HTML=1

# Resume support: if set, we cache repo SHAs and skip unchanged repos on next run
ENABLE_CHECKPOINTS=1
